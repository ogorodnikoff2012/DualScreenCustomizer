import org.jetbrains.changelog.date
import java.time.LocalDateTime
import java.time.Year

plugins {
    id("java")
    id("org.jetbrains.intellij") version "1.17.2"
    id("org.jetbrains.changelog") version "1.3.1"
    id("com.diffplug.spotless") version "6.25.0"
}

group = "tk.ogorod98"
version = "1.0.10"

repositories {
    mavenCentral()
}

dependencies {
    implementation("net.java.dev.jna:jna:5.14.0")
    implementation("net.java.dev.jna:jna-platform:5.14.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.0")
}

spotless {
    java {
        importOrder()

        removeUnusedImports()

        cleanthat()
        googleJavaFormat()

        formatAnnotations()

        licenseHeader("/* (C) Vladimir Ogorodnikov <https://github.com/ogorodnikoff2012>, ${Year.now()} */")
    }
}

// Configure Gradle IntelliJ Plugin - read more: https://github.com/JetBrains/gradle-intellij-plugin
intellij {
    // version.set("2021.2")
    version.set("2023.3.4")
    type.set("IU") // Target IDE Platform

    plugins.set(listOf(/* Plugin Dependencies */))
}

val generatedSrcDir = layout.buildDirectory.dir("generated/sources/buildInfo").get()

tasks.register("generateBuildInfo") {
    outputs.dir(generatedSrcDir)
    doLast {
        val buildInfoClassFile =
            generatedSrcDir.file("tk/ogorod98/dualscreencustomizer/meta/BuildInfo.java").asFile
        if (!buildInfoClassFile.parentFile.exists()) {
            buildInfoClassFile.parentFile.mkdirs()
        }
        buildInfoClassFile.writeText(
            """
            /* (C) Vladimir Ogorodnikov <https://github.com/ogorodnikoff2012>, ${Year.now()} */
            package tk.ogorod98.dualscreencustomizer.meta;

            /** This is an autogenerated file that contains build information. */
            public class BuildInfo {
              private BuildInfo() {}

                public static final String VERSION = "${project.version}";
                public static final String BUILD_TIME = "${LocalDateTime.now()}";
            }
            """.trimIndent()
        )
    }
}

tasks.named("compileJava") {
    dependsOn("generateBuildInfo")
}

sourceSets {
    main {
        java {
            srcDir(generatedSrcDir)
        }
    }
}

tasks {
    // Set the JVM compatibility versions
    withType<JavaCompile> {
        sourceCompatibility = "17"
        targetCompatibility = "17"
    }

    patchPluginXml {
        changeNotes.set(provider { changelog.getUnreleased().toHTML() })
        sinceBuild.set("232.*")
        untilBuild.set("233.*")
    }

    signPlugin {
        certificateChain.set(File("./.keys/chain.crt").readText(Charsets.UTF_8))
        privateKey.set(File("./.keys/private.pem").readText(Charsets.UTF_8))
        password.set(System.getenv("PRIVATE_KEY_PASSWORD"))
    }

    publishPlugin {
        token.set(File("./.keys/jetbrains.token").readText(Charsets.UTF_8))
    }
}

changelog {
    version.set("1.0.0")
    path.set("${project.projectDir}/CHANGELOG.md")
    header.set(provider { "[${version.get()}] - ${date()}" })
    itemPrefix.set("-")
    keepUnreleasedSection.set(true)
    unreleasedTerm.set("[Unreleased]")
    groups.set(listOf("Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"))
}
